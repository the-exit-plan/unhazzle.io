'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useDeployment } from '@/lib/context/DeploymentContext';

interface EnvVar {
  key: string;
  value: string;
  isSecret: boolean;
  isAutoGenerated?: boolean;
}

export default function Environment() {
  const router = useRouter();
  const { state, updateEnvironment } = useDeployment();
  
  const [envVars, setEnvVars] = useState<EnvVar[]>([]);
  const [showValues, setShowValues] = useState<{[key: string]: boolean}>({});

  // Scroll to top on mount
  useEffect(() => {
    window.scrollTo(0, 0);
  }, []);

  // Initialize with auto-generated vars
  useEffect(() => {
    // Redirect if no resources configured
    if (!state.resources) {
      router.push('/');
      return;
    }

    const autoGenerated: EnvVar[] = [];
    
    // Generate realistic random values
    const dbPassword = `${Math.random().toString(36).substring(2, 10)}${Math.random().toString(36).substring(2, 10)}`.toUpperCase();
    const redisPassword = `${Math.random().toString(36).substring(2, 12)}${Math.random().toString(36).substring(2, 12)}`.toUpperCase();
    const dbHost = `db-${Math.random().toString(36).substring(2, 9)}.unhazzle.io`;
    const cacheHost = `cache-${Math.random().toString(36).substring(2, 9)}.unhazzle.io`;

    // Add database credentials if database is configured
    if (state.resources.database) {
      autoGenerated.push({
        key: 'DATABASE_URL',
        value: `postgresql://unhazzle_user:${dbPassword}@${dbHost}:5432/ecommerce_prod`,
        isSecret: true,
        isAutoGenerated: true
      });
      autoGenerated.push({
        key: 'DATABASE_PASSWORD',
        value: dbPassword,
        isSecret: true,
        isAutoGenerated: true
      });
    }

    // Add cache credentials if Redis is configured
    if (state.resources.cache) {
      autoGenerated.push({
        key: 'REDIS_URL',
        value: `redis://default:${redisPassword}@${cacheHost}:6379`,
        isSecret: true,
        isAutoGenerated: true
      });
      autoGenerated.push({
        key: 'REDIS_PASSWORD',
        value: redisPassword,
        isSecret: true,
        isAutoGenerated: true
      });
    }

    // Add some common pre-filled user secrets for e-commerce
    const userSecrets: EnvVar[] = [
      { key: 'STRIPE_SECRET_KEY', value: 'sk_live_51NxK7jL2Bm9x8P3vQz4R5w6Y7t8U9i0', isSecret: true },
      { key: 'STRIPE_WEBHOOK_SECRET', value: 'whsec_a7B8c9D0e1F2g3H4i5J6k7L8m9N0o1P2', isSecret: true },
      { key: 'NODE_ENV', value: 'production', isSecret: false },
    ];

    setEnvVars([...autoGenerated, ...userSecrets]);
  }, [state.resources, router]);

  const addEnvVar = () => {
    setEnvVars([...envVars, { key: '', value: '', isSecret: false }]);
  };

  const updateEnvVar = (index: number, field: 'key' | 'value' | 'isSecret', value: string | boolean) => {
    const updated = [...envVars];
    if (field === 'isSecret') {
      updated[index].isSecret = value as boolean;
    } else {
      updated[index][field] = value as string;
    }
    setEnvVars(updated);
  };

  const removeEnvVar = (index: number) => {
    // Don't allow removing auto-generated vars
    if (envVars[index].isAutoGenerated) return;
    setEnvVars(envVars.filter((_, i) => i !== index));
  };

  const toggleShowValue = (key: string) => {
    setShowValues(prev => ({ ...prev, [key]: !prev[key] }));
  };

  const handleContinue = () => {
    // Save environment variables to context
    const userSecrets = envVars
      .filter(env => !env.isAutoGenerated && env.key)
      .map(env => ({ key: env.key, value: env.value, masked: env.isSecret }));
    
    const autoGenerated = envVars
      .filter(env => env.isAutoGenerated)
      .map(env => ({ key: env.key, value: env.value, readOnly: true }));

    updateEnvironment({ userSecrets, autoGenerated });
    router.push('/domain');
  };

  if (!state.resources) {
    return null;
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 py-12 px-4">
      <div className="max-w-5xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="inline-flex items-center gap-2 bg-blue-100 text-blue-700 px-4 py-2 rounded-full text-sm font-medium mb-4">
            <span>🔐</span>
            <span>Secure environment configuration</span>
          </div>
          <h1 className="text-4xl font-bold text-slate-900 mb-3">
            Environment Variables
          </h1>
          <p className="text-lg text-slate-600">
            We&apos;ve auto-generated connection strings. Add your application secrets below.
          </p>
        </div>

        {/* Auto-generated Section */}
        {envVars.some(env => env.isAutoGenerated) && (
          <div className="bg-white rounded-2xl shadow-lg p-8 mb-6">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center gap-3">
                <div className="w-12 h-12 bg-gradient-to-br from-green-600 to-teal-600 rounded-lg flex items-center justify-center text-white text-xl">
                  ✨
                </div>
                <div>
                  <h2 className="text-2xl font-bold text-slate-900">Auto-Generated</h2>
                  <p className="text-sm text-slate-600">Managed by unhazzle, no setup required</p>
                </div>
              </div>
              <div className="text-xs bg-green-100 text-green-700 px-3 py-1 rounded-full font-semibold">
                READY
              </div>
            </div>

            <div className="space-y-3">
              {envVars.filter(env => env.isAutoGenerated).map((env, index) => (
                <div key={env.key} className="flex items-center gap-3 p-4 bg-green-50 border border-green-200 rounded-lg">
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-1">
                      <code className="text-sm font-semibold text-slate-900">{env.key}</code>
                      <span className="text-xs bg-green-200 text-green-800 px-2 py-0.5 rounded">auto</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <code className="text-xs text-slate-600 font-mono">
                        {showValues[env.key] ? env.value : '••••••••••••••••••••'}
                      </code>
                      <button
                        onClick={() => toggleShowValue(env.key)}
                        className="text-xs text-green-700 hover:text-green-900 font-medium"
                      >
                        {showValues[env.key] ? '🙈 Hide' : '👁️ Show'}
                      </button>
                    </div>
                  </div>
                  <div className="text-2xl">🔒</div>
                </div>
              ))}
            </div>

            <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
              <p className="text-sm text-blue-800">
                <strong>💡 Tip:</strong> These connection strings are automatically injected at runtime. They&apos;re rotated during maintenance windows for security.
              </p>
            </div>
          </div>
        )}

        {/* User Secrets Section */}
        <div className="bg-white rounded-2xl shadow-lg p-8 mb-6">
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center gap-3">
              <div className="w-12 h-12 bg-gradient-to-br from-purple-600 to-blue-600 rounded-lg flex items-center justify-center text-white text-xl">
                🔑
              </div>
              <div>
                <h2 className="text-2xl font-bold text-slate-900">Application Secrets</h2>
                <p className="text-sm text-slate-600">API keys, tokens, and configuration</p>
              </div>
            </div>
            <button
              onClick={addEnvVar}
              className="flex items-center gap-2 px-4 py-2 bg-purple-100 text-purple-700 rounded-lg hover:bg-purple-200 transition font-medium text-sm"
            >
              <span>+</span>
              <span>Add Variable</span>
            </button>
          </div>

          <div className="space-y-3">
            {envVars.filter(env => !env.isAutoGenerated).map((env, actualIndex) => {
              // Find the real index in the full array
              const index = envVars.findIndex((e, i) => !e.isAutoGenerated && envVars.filter((x, j) => !x.isAutoGenerated && j < i).length === actualIndex);
              
              return (
                <div key={index} className="flex items-start gap-3 p-4 bg-slate-50 border border-slate-200 rounded-lg">
                  <div className="flex-1 space-y-2">
                    <input
                      type="text"
                      placeholder="KEY_NAME"
                      value={env.key}
                      onChange={(e) => updateEnvVar(index, 'key', e.target.value.toUpperCase().replace(/[^A-Z0-9_]/g, '_'))}
                      className="w-full px-3 py-2 border border-slate-300 rounded-lg text-sm font-mono focus:ring-2 focus:ring-purple-500 focus:border-transparent outline-none"
                    />
                    <div className="flex gap-2">
                      <input
                        type={env.isSecret && !showValues[env.key] ? 'password' : 'text'}
                        placeholder="value"
                        value={env.value}
                        onChange={(e) => updateEnvVar(index, 'value', e.target.value)}
                        className="flex-1 px-3 py-2 border border-slate-300 rounded-lg text-sm font-mono focus:ring-2 focus:ring-purple-500 focus:border-transparent outline-none"
                      />
                      {env.isSecret && (
                        <button
                          onClick={() => toggleShowValue(env.key)}
                          className="px-3 py-2 bg-white border border-slate-300 rounded-lg hover:bg-slate-50 transition text-sm"
                        >
                          {showValues[env.key] ? '🙈' : '👁️'}
                        </button>
                      )}
                    </div>
                    <label className="flex items-center gap-2 text-sm text-slate-600">
                      <input
                        type="checkbox"
                        checked={env.isSecret}
                        onChange={(e) => updateEnvVar(index, 'isSecret', e.target.checked)}
                        className="rounded border-slate-300 text-purple-600 focus:ring-purple-500"
                      />
                      <span>Mark as secret (encrypted at rest)</span>
                    </label>
                  </div>
                  <button
                    onClick={() => removeEnvVar(index)}
                    className="mt-2 text-slate-400 hover:text-red-600 transition"
                  >
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
              );
            })}

            {envVars.filter(env => !env.isAutoGenerated).length === 0 && (
              <div className="text-center py-8 text-slate-500">
                <p className="mb-2">No custom variables yet</p>
                <p className="text-sm">Click "Add Variable" to add API keys, tokens, or configuration</p>
              </div>
            )}
          </div>
        </div>

        {/* Security Info */}
        <div className="bg-gradient-to-r from-purple-50 to-blue-50 rounded-xl p-6 mb-8 border border-purple-100">
          <h3 className="font-semibold text-slate-900 mb-3 flex items-center gap-2">
            <span>🔐</span>
            <span>Security best practices:</span>
          </h3>
          <ul className="space-y-2 text-sm text-slate-700">
            <li className="flex items-start gap-2">
              <span className="text-purple-600 mt-0.5">•</span>
              <span><strong>Encryption:</strong> All secrets are encrypted at rest using AES-256</span>
            </li>
            <li className="flex items-start gap-2">
              <span className="text-purple-600 mt-0.5">•</span>
              <span><strong>Access control:</strong> Only your running containers can access these values</span>
            </li>
            <li className="flex items-start gap-2">
              <span className="text-purple-600 mt-0.5">•</span>
              <span><strong>Audit logs:</strong> Every secret access is logged for compliance</span>
            </li>
            <li className="flex items-start gap-2">
              <span className="text-purple-600 mt-0.5">•</span>
              <span><strong>Updates:</strong> Change secrets anytime without redeployment</span>
            </li>
          </ul>
        </div>

        {/* Action Buttons */}
        <div className="flex items-center justify-between">
          <button
            onClick={() => router.back()}
            className="px-6 py-3 text-slate-600 hover:text-slate-900 font-medium transition"
          >
            ← Back
          </button>
          <button
            onClick={handleContinue}
            className="inline-flex items-center gap-3 bg-gradient-to-r from-purple-600 to-blue-600 text-white font-semibold px-8 py-3 rounded-lg hover:from-purple-700 hover:to-blue-700 transition-all transform hover:scale-105 shadow-lg"
          >
            <span>Continue to Domain Setup</span>
            <span>→</span>
          </button>
        </div>
      </div>
    </div>
  );
}
